macro(add_test_files NAME)
    foreach(TEST_FILE ${ARGN})
        set(TEST_${NAME}_FILES ${CMAKE_CURRENT_SOURCE_DIR}/${TEST_FILE} ${TEST_${NAME}_FILES})
    endforeach(TEST_FILE)
endmacro(add_test_files)

macro(add_test_moc_headers NAME)
    foreach(TEST_MOC_HEADER ${ARGN})
        set(TEST_${NAME}_MOC_HEADERS ${CMAKE_CURRENT_SOURCE_DIR}/${TEST_MOC_HEADER} ${TEST_${NAME}_MOC_HEADERS})
    endforeach(TEST_MOC_HEADER)
endmacro(add_test_moc_headers)

macro(add_test_link_libs NAME)
    set(TEST_${NAME}_LINK_LIBS ${ARGN} ${TEST_${NAME}_LINK_LIBS})
endmacro(add_test_link_libs)

macro(add_unit_test NAME)
	add_custom_command(
		OUTPUT ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.cxx
        COMMAND cxxtestgen.pl --error-printer --abort-on-fail --have-eh -o ${CMAKE_CURRENT_BINARY_DIR}/${NAME}.cxx ${TEST_${NAME}_FILES}
        DEPENDS ${TEST_${NAME}_FILES}
	)
    set(CXX_${NAME}_OUTPUT_DIR ${CMAKE_CURRENT_BINARY_DIR})
    if(${TEST_APP})
        qt4_wrap_cpp(TEST_${NAME}_MOCS ${TEST_${NAME}_MOC_HEADERS})
    endif(${TEST_APP})

    add_executable(${NAME} ${CXX_${NAME}_OUTPUT_DIR}/${NAME}.cxx ${TEST_${NAME}_MOCS})

    add_dependencies(${NAME} fakeInputStatic fakeInputShared)

    target_link_libraries(${NAME} ${TEST_${NAME}_LINK_LIBS} fakeInput)
    set_target_properties("${NAME}" 
        PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin/test/unit_tests/
    )    
	#add_test("${NAME}" "${EXECUTABLE_OUTPUT_PATH}/${NAME}")
endmacro(add_unit_test)

macro(add_manual_test NAME)
    if(${TEST_APP})
        qt4_wrap_cpp(TEST_${NAME}_MOCS ${TEST_${NAME}_MOC_HEADERS})
    endif(${TEST_APP})

    add_executable(${NAME} ${TEST_${NAME}_FILES} ${TEST_${NAME}_MOCS})

    add_dependencies(${NAME} fakeInputStatic fakeInputShared)

    target_link_libraries(${NAME} ${TEST_${NAME}_LINK_LIBS} fakeInput)
    set_target_properties(${NAME} 
        PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin/test/manual_tests/
    )
endmacro(add_manual_test)

macro(add_manual_test_gui NAME)
    if(${TEST_APP})
        qt4_wrap_cpp(TEST_${NAME}_MOCS ${TEST_${NAME}_MOC_HEADERS})
    endif(${TEST_APP})

    if("${WIN32}" AND NOT "${DEBUG}")
        add_executable(${NAME} WIN32 ${TEST_${NAME}_FILES} ${TEST_${NAME}_MOCS})
    else("${WIN32}" AND NOT "${DEBUG}")
        add_executable(${NAME} ${TEST_${NAME}_FILES} ${TEST_${NAME}_MOCS})
    endif("${WIN32}" AND NOT "${DEBUG}")

    add_dependencies(${NAME} fakeInputStatic fakeInputShared)

    target_link_libraries(${NAME} ${TEST_${NAME}_LINK_LIBS} fakeInput)
    set_target_properties(${NAME} 
        PROPERTIES
            RUNTIME_OUTPUT_DIRECTORY ${CMAKE_HOME_DIRECTORY}/bin/test/manual_tests/
    )


    if("${WIN32}" AND NOT "${DEBUG}")
        set_target_properties(${NAME} 
            PROPERTIES
                LINK_FLAGS "/ENTRY:\"WinMainCRTStartup\""
        )
    endif("${WIN32}" AND NOT "${DEBUG}")
endmacro(add_manual_test_gui)

macro(add_uninstall_target PATH)
    configure_file(
        "${PATH}/cmake_uninstall.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
        IMMEDIATE @ONLY
    )

    configure_file(
        "${PATH}/cmake_uninstall_dir.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall_dir.cmake"
        IMMEDIATE @ONLY
    )

    configure_file(
        "${PATH}/cmake_uninstall_path.cmake.in"
        "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall_path.cmake"
        IMMEDIATE @ONLY
    )

    add_custom_target(uninstall
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall_dir.cmake
        COMMAND ${CMAKE_COMMAND} -P ${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall_path.cmake
    )
endmacro(add_uninstall_target)

macro(install_directory PATH)
    install(CODE
        "
        if(NOT EXISTS \"${PATH}\")
            file(MAKE_DIRECTORY \"${PATH}\")

            set(manifest_file ${CMAKE_BINARY_DIR}/install_dir_manifest.txt)

            if(EXISTS \${manifest_file})
                file(READ \${manifest_file} manifest_content)
            endif(EXISTS \${manifest_file})

            file(WRITE \${manifest_file} \"${PATH}\n\")
            file(APPEND \${manifest_file} \"\${manifest_content}\")
        endif(NOT EXISTS \"${PATH}\")
        "
    )
endmacro(install_directory PATH)

macro(install_pkg_config_file IN_FILE)    
    string(REGEX MATCH "[^/]+$" file_name "${IN_FILE}")
    string(REGEX REPLACE "\\.in$" "" file_name "${file_name}")
    install(CODE
        "
        set(VERSION ${VERSION})
        set(SUBVERSION ${SUBVERSION})
        configure_file(
            \"${IN_FILE}\"
            \"${CMAKE_BINARY_DIR}/${file_name}\"
            IMMEDIATE @ONLY
        )
        "
    )
    install_directory(${INSTALL_PREFIX}/${INSTALL_LIBRARY_DIR}/pkgconfig)
    install(FILES ${CMAKE_BINARY_DIR}/${file_name}
        DESTINATION "${INSTALL_PREFIX}/${INSTALL_LIBRARY_DIR}/pkgconfig"
    )
endmacro(install_pkg_config_file IN_FILE)    

macro(install_to_win_path PATH)
    install(CODE
        "
        get_filename_component(ENV_PATH
            \"[HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment;Path]\" ABSOLUTE CACHE
        )

        string(REGEX REPLACE \"${CMAKE_BINARY_DIR}/?\" \"\" ENV_PATH \"\${ENV_PATH}\")
        string(REGEX MATCH \"${PATH}\" PATH_MATCH \"\${ENV_PATH}\")
        string(REGEX REPLACE \"/\" \"\\\\\\\\\" ENV_PATH \"\${ENV_PATH}\")

        if(\"\${PATH_MATCH}\" STREQUAL \"\")
            execute_process(
                COMMAND ${CMAKE_COMMAND} -E write_regv
                    \"HKEY_LOCAL_MACHINE\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Session Manager\\\\Environment;Path\"
                    \"\${ENV_PATH};${PATH}\"
            )            
        endif(\"\${PATH_MATCH}\" STREQUAL \"\")

        file(APPEND ${CMAKE_BINARY_DIR}/install_path_manifest.txt \"${PATH}\\n\")
        "
    )
endmacro(install_to_win_path PATH)
